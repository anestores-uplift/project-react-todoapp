{"version":3,"sources":["components/TaskRow.js","components/TaskTable.js","components/AddTask.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","dispatch","doneTask","id","type","payload","deleteTask","name","status","onClick","className","TaskTable","title","arrayTask","taskClass","Table","striped","bordered","hover","map","task","addNewTask","newTaskObj","tasks","useState","taskNameInput","setTaskNameInput","errorMessage","setErrorMessage","htmlFor","onChange","e","target","value","trim","taskExist","newTask","forEach","toLowerCase","uuidv4","state","pendingTasks","filter","doneTasks","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","counter","reducer","action","tasksCopy","i","splice","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b174a737.chunk.js","sourcesContent":["import {connect} from \"react-redux\";\n\nconst TaskRow = ({name, id, status,\n                     doneTask,\n                     deleteTask}) => {\n    return (\n        <tr>\n            <td key={id}>\n                {name}\n            </td>\n                {\n                    status === 'pending' ? [\n                    <td key={id}>\n                        <button onClick={() => doneTask(id)} className=\"btn btn-success\">Mark as Done</button>\n                        <button onClick={() => deleteTask(id)} className=\"btn btn-danger\">Delete</button>\n                    </td>\n                    ] : ''\n                }\n        </tr>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        doneTask: (id) => dispatch({\n            type: 'MARK_TASK_AS_DONE',\n            payload: id,\n        }),\n        deleteTask: (id) => dispatch({\n            type: 'DELETE_TASK',\n            payload: id,\n        })\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(TaskRow);\n","import Table from \"react-bootstrap/Table\";\nimport TaskRow from \"./TaskRow\";\nimport './TaskTable.css';\n\nconst TaskTable = ({title, arrayTask, taskClass}) => {\n    return(\n        <div>\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>\n                            {title}\n                        </th>\n                        {\n                            taskClass === 'pending' ?\n                                <th>\n                                    Actions\n                                </th> : null\n\n                        }\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        arrayTask.map(task => {\n                            return <TaskRow name={task.name} id={task.id} key={task.id} status={task.status} />\n\n                        })\n                    }\n                </tbody>\n                <tfoot>\n                </tfoot>\n            </Table>\n        </div>\n    )\n}\n\n\nexport default TaskTable;","import {useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {v4 as uuidv4} from \"uuid\";\n\nconst AddTask = ({tasks, addNewTask}) =>  {\n    const [taskNameInput, setTaskNameInput] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const taskNameInputChangHandler = (e) => {\n        setTaskNameInput(e.target.value);\n        setErrorMessage('');\n    }\n\n    const addTask = () => {\n        if(taskNameInput.trim() !== '') {\n            let taskExist = false;\n            let newTask = taskNameInput;\n            let tasksCopy = tasks;\n\n            tasksCopy.forEach((task) => {\n                if(task.name.toLowerCase() === newTask.trim().toLowerCase()) {\n                    taskExist = true;\n                }\n            })\n\n            if(taskExist) {\n                setErrorMessage('Task already exists.');\n            }\n            else {\n                let newTaskObj = {\n                    id: uuidv4(),\n                    name: taskNameInput,\n                    status: 'pending',\n                }\n                addNewTask(newTaskObj);\n                setTaskNameInput('');\n                setErrorMessage('');\n            }\n        }\n        else {\n            setErrorMessage('Task Name is required.');\n        }\n    }\n\n    return(\n        <div>\n            <label htmlFor=\"\">Task Name</label>\n            <input type=\"text\"\n                   className=\"form-control\"\n                    onChange={taskNameInputChangHandler}\n                   value={taskNameInput}\n            />\n            <button onClick={addTask}\n                className=\"btn btn-primary\">Add Task</button>\n            {\n                errorMessage ?\n                    <div className=\"Error\">{errorMessage}</div> :\n                    ''\n            }\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNewTask: (newTaskObj) => dispatch ({\n            type: 'ADD_TASK',\n            payload: newTaskObj,\n        }),\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(AddTask);","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport TaskTable from \"./components/TaskTable\";\nimport AddTask from \"./components/AddTask\";\nimport {connect} from \"react-redux\";\n\nconst App = ({tasks}) => {\n\n    let pendingTasks = tasks.filter(task => task.status === 'pending');\n    let doneTasks = tasks.filter(task => task.status === 'done');\n\n    return (\n        <div className=\"App\">\n            <main>\n                <h1>Todo App</h1>\n                <div>\n                    <AddTask tasks={tasks}/>\n                </div>\n\n                {\n                    pendingTasks.length > 0 ?\n                        <TaskTable title={'Pending Tasks'}\n                                   arrayTask={pendingTasks}\n                                   taskClass={'pending'}\n                        /> :\n                        <h2>No Pending Tasks</h2>\n                }\n\n                {\n                    doneTasks.length > 0 ?\n                        <TaskTable title={'Done Tasks'}\n                                   arrayTask={doneTasks}\n                                   taskClass={'done'}\n                        /> :\n                        ''\n                }\n            </main>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        tasks: state.tasks,\n    }\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v4 as uuidv4} from \"uuid\";\n\nconst initialState = {\n    counter: 5,\n    tasks: [\n        {\n            id: uuidv4(),\n            name: 'eat',\n            status: 'pending',\n        },\n        {\n            id: uuidv4(),\n            name: 'code',\n            status: 'pending',\n        },\n        {\n            id: uuidv4(),\n            name: 'sleep',\n            status: 'done',\n        },\n    ],\n}\n\n// state = data to be managed\n// action = a way to set/change the state\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'ADD_TASK': {\n            return {\n                ...state,\n                tasks: [...state.tasks, action.payload],\n            }\n        }\n        case 'MARK_TASK_AS_DONE': {\n            let tasksCopy = [...state.tasks];\n            tasksCopy = tasksCopy.map((task) => {\n                if(task.id === action.payload) {\n                    task.status = 'done';\n                }\n                return task;\n            })\n            return {\n                ...state,\n                tasks: [...tasksCopy]\n            }\n        }\n        case 'DELETE_TASK': {\n            let tasksCopy = [...state.tasks];\n            for(let i = 0; i < tasksCopy.length; i++){\n                if ( tasksCopy[i].id === action.payload) {\n                    tasksCopy.splice(i, 1);\n                }\n            }\n            return {\n                ...state,\n                tasks: [...tasksCopy]\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}